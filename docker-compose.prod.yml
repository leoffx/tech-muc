# Production deployment example
# Use your orchestrator's secret management in production

services:
  tech-muc:
    build:
      context: .
      dockerfile: build/Dockerfile
      args:
        - CONVEX_URL=${CONVEX_URL}
        - NEXT_PUBLIC_CONVEX_URL=${CONVEX_URL}
    ports:
      - "3000:3000"
    environment:
      # Define all env vars explicitly - retrieve from secret manager
      # Example using shell variable substitution:
      - NODE_ENV=production
      - OPENAI_API_KEY=${OPENAI_API_KEY}  # Must be set in shell/CI environment
      - CONVEX_URL=${CONVEX_URL}
      - OPENCODE_MODEL=${OPENCODE_MODEL:-openai/gpt-5-codex}
      - OPENCODE_ENDPOINT=${OPENCODE_ENDPOINT}
      - GH_TOKEN=${GH_TOKEN}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # Optional: Resource limits for production
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

# Usage:
# 1. Export secrets from your secret manager:
#    export OPENAI_API_KEY=$(aws secretsmanager get-secret-value --secret-id openai-key --query SecretString --output text)
#    export CONVEX_URL=$(aws secretsmanager get-secret-value --secret-id convex-url --query SecretString --output text)
#
# 2. Run docker-compose:
#    docker-compose -f docker-compose.prod.yml up -d
